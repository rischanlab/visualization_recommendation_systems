# Imports
import ml.train as train
from helpers.processing import *
from helpers.analysis import *
from imblearn.over_sampling import RandomOverSampler
from torch.utils import data
import torch
import pandas as pd
import scipy as sc
import numpy as np
import time
import gc
import os
import sys
sys.path.insert(0, '..')


RANDOM_STATE = 42

features_directory = '../features/processed'
saves_directory = './saves'
num_datapoints = None  # None if you want all

# you should have run the save_field script before this to generate the .npy files
# this script tests the impact that dataset-agg features and field-level features have on classification accuracy
# you can test on either dataset-only, field-only, or both
# the indices are divided into either dataset indices or field here
dataset_indices = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    56,
    57,
    58,
    59,
    60,
    66,
    67,
    68,
    69,
    70,
    76,
    77,
    78,
    79,
    80,
    86,
    87,
    88,
    89,
    90,
    96,
    97,
    98,
    99,
    100,
    106,
    107,
    108,
    109,
    110,
    116,
    117,
    118,
    119,
    120,
    121,
    122,
    123,
    124,
    125,
    126,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    141,
    142,
    143,
    144,
    145,
    151,
    152,
    153,
    154,
    155,
    161,
    162,
    163,
    164,
    165,
    166,
    167,
    168,
    169,
    170,
    176,
    177,
    178,
    179,
    180,
    187,
    188,
    189,
    190,
    191,
    197,
    198,
    199,
    200,
    201,
    207,
    208,
    209,
    210,
    211,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    232,
    233,
    234,
    235,
    236,
    242,
    243,
    244,
    245,
    246,
    252,
    253,
    254,
    255,
    256,
    262,
    263,
    264,
    265,
    266,
    272,
    273,
    274,
    275,
    276,
    282,
    283,
    284,
    285,
    286,
    287,
    288,
    289,
    290,
    291,
    292,
    293,
    294,
    295,
    296,
    297,
    298,
    299,
    300,
    301,
    307,
    308,
    309,
    310,
    311,
    312,
    313,
    314,
    315,
    316,
    317,
    318,
    319,
    320,
    321,
    327,
    328,
    329,
    330,
    331,
    337,
    338,
    339,
    340,
    341,
    347,
    348,
    349,
    350,
    351,
    357,
    358,
    359,
    360,
    361,
    367,
    368,
    369,
    370,
    371,
    377,
    378,
    379,
    380,
    381,
    387,
    388,
    389,
    390,
    391,
    392,
    393,
    394,
    395,
    396,
    397,
    398,
    399,
    400,
    401,
    402,
    403,
    404,
    405,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    413,
    414,
    415,
    416,
    417,
    418,
    419,
    420,
    421,
    427,
    428,
    429,
    430,
    431,
    432,
    433,
    434,
    435,
    436,
    442,
    443,
    444,
    445,
    446,
    447,
    448,
    449,
    450,
    451,
    457,
    458,
    459,
    460,
    461,
    462,
    463,
    464,
    465,
    466,
    472,
    473,
    474,
    475,
    476,
    477,
    478,
    479,
    480,
    481,
    487,
    488,
    489,
    490,
    491,
    492,
    493,
    494,
    495,
    496,
    502,
    503,
    504,
    505,
    506,
    507,
    508,
    509,
    510,
    511,
    517,
    518,
    519,
    520,
    521,
    522,
    523,
    524,
    525,
    526,
    532,
    533,
    534,
    535,
    536,
    537,
    538,
    539,
    540,
    541,
    547,
    548,
    549,
    550,
    551,
    552,
    553,
    554,
    555,
    556,
    562,
    563,
    564,
    565,
    566,
    567,
    568,
    569,
    570,
    571,
    577,
    578,
    579,
    580,
    581,
    582,
    583,
    584,
    585,
    586,
    592,
    593,
    594,
    595,
    596,
    597,
    598,
    599,
    600,
    601,
    607,
    608,
    609,
    610,
    611,
    612,
    613,
    614,
    615,
    616,
    622,
    623,
    624,
    625,
    626,
    627,
    628,
    629,
    630,
    631,
    637,
    638,
    639,
    640,
    641,
    642,
    643,
    644,
    645,
    646,
    652,
    653,
    654,
    655,
    656,
    657,
    658,
    659,
    660,
    661,
    667,
    668,
    669,
    670,
    671,
    672,
    673,
    674,
    675,
    676,
    682,
    683,
    684,
    685,
    686,
    687,
    688,
    689,
    690,
    691,
    697,
    698,
    699,
    700,
    701,
    702,
    703,
    704,
    705,
    706,
    712,
    713,
    714,
    715,
    716,
    717,
    718,
    719,
    720,
    721,
    722,
    723,
    724,
    725,
    726,
    727,
    728,
    729,
    730,
    731,
    737,
    738,
    739,
    740,
    741,
    742,
    743,
    744,
    745,
    746,
    752,
    753,
    754,
    755,
    756,
    757,
    758,
    759,
    760,
    761,
    762,
    763,
    764,
    765,
    766,
    767,
    768,
    769,
    770,
    771,
    777,
    778,
    779,
    780,
    781,
    782,
    783,
    784,
    785,
    786,
    792,
    793,
    794,
    795,
    796,
    797,
    798,
    799,
    800,
    801,
    807,
    808,
    809,
    810,
    811,
    812,
    813,
    814,
    815,
    816,
    822,
    823,
    824,
    825,
    826,
    827,
    828,
    829,
    830,
    831,
    832,
    833,
    834,
    835,
    836,
    837,
    838,
    839,
    840,
    841,
    842,
    843,
    844,
    845,
    846,
    847,
    848,
    849,
    850,
    851,
    852,
    853,
    854,
    855,
    856,
    857,
    858,
    864,
    865,
    866,
    867,
    868,
    869,
    870,
    871,
    872,
    873,
    879,
    880,
    881,
    882,
    883,
    884,
    885,
    886,
    887,
    888,
    894,
    895,
    896,
    897,
    898,
    899,
    900,
    901,
    902,
    903,
    904,
    905,
    906,
    907,
    908,
    909,
    910,
    911,
    912,
    913,
    914,
    915,
    916,
    917,
    918,
    919,
    920,
    921,
    922,
    923,
    924,
    925,
    926,
    927,
    928,
    929,
    930,
    931,
    932,
    933,
    939,
    940,
    941,
    942,
    943,
    944,
    945,
    946,
    947,
    948,
    954,
    955,
    956,
    957,
    958,
    959,
    960,
    961,
    962,
    963,
    969,
    970,
    971,
    972,
    973,
    974,
    975,
    976,
    977,
    978,
    984,
    985,
    986,
    987,
    988,
    989,
    990,
    991,
    992,
    993,
    994,
    995,
    996,
    997,
    998,
    999,
    1000,
    1001,
    1002,
    1003,
    1004,
    1005,
    1006,
    1007,
    1008,
    1009,
    1010,
    1011,
    1012,
    1013,
    1014,
    1015,
    1016,
    1017,
    1018,
    1019,
    1020,
    1026,
    1027,
    1028,
    1029,
    1030,
    1031,
    1032,
    1033,
    1034,
    1035,
    1041,
    1042,
    1043,
    1044,
    1045,
    1051,
    1052,
    1053,
    1054,
    1055,
    1056,
    1057,
    1058,
    1059,
    1060,
    1066,
    1067,
    1068,
    1069,
    1070,
    1071,
    1072,
    1073,
    1074,
    1075,
    1081,
    1082,
    1083,
    1084,
    1085,
    1086,
    1087,
    1088,
    1089,
    1090,
    1096,
    1097,
    1098,
    1099,
    1100,
    1101,
    1102,
    1103,
    1104,
    1105,
    1111,
    1112,
    1113,
    1114,
    1115,
    1116,
    1117,
    1118,
    1119,
    1120,
    1126,
    1127,
    1128,
    1129,
    1130,
    1131,
    1132,
    1133,
    1134,
    1135,
    1141,
    1142,
    1143,
    1144,
    1145,
    1151,
    1152,
    1153,
    1154,
    1155,
    1156,
    1157,
    1158,
    1159,
    1160,
    1166,
    1167,
    1168,
    1169,
    1170,
    1171,
    1172,
    1173,
    1174,
    1175,
    1181,
    1182,
    1183,
    1184,
    1185,
    1191,
    1192,
    1193,
    1194,
    1195,
    1196,
    1197,
    1198,
    1199,
    1200,
    1206,
    1207,
    1208,
    1209,
    1210,
    1211,
    1212,
    1213,
    1214,
    1215,
    1221,
    1222,
    1223,
    1224,
    1225,
    1231,
    1232,
    1233,
    1234,
    1235,
    1241,
    1242,
    1243,
    1244,
    1245]
field_indices = [
    10,
    11,
    12,
    13,
    14,
    25,
    26,
    27,
    28,
    29,
    55,
    61,
    62,
    63,
    64,
    65,
    71,
    72,
    73,
    74,
    75,
    81,
    82,
    83,
    84,
    85,
    91,
    92,
    93,
    94,
    95,
    101,
    102,
    103,
    104,
    105,
    111,
    112,
    113,
    114,
    115,
    136,
    137,
    138,
    139,
    140,
    146,
    147,
    148,
    149,
    150,
    156,
    157,
    158,
    159,
    160,
    171,
    172,
    173,
    174,
    175,
    181,
    182,
    183,
    184,
    185,
    186,
    192,
    193,
    194,
    195,
    196,
    202,
    203,
    204,
    205,
    206,
    212,
    213,
    214,
    215,
    216,
    227,
    228,
    229,
    230,
    231,
    237,
    238,
    239,
    240,
    241,
    247,
    248,
    249,
    250,
    251,
    257,
    258,
    259,
    260,
    261,
    267,
    268,
    269,
    270,
    271,
    277,
    278,
    279,
    280,
    281,
    302,
    303,
    304,
    305,
    306,
    322,
    323,
    324,
    325,
    326,
    332,
    333,
    334,
    335,
    336,
    342,
    343,
    344,
    345,
    346,
    352,
    353,
    354,
    355,
    356,
    362,
    363,
    364,
    365,
    366,
    372,
    373,
    374,
    375,
    376,
    382,
    383,
    384,
    385,
    386,
    422,
    423,
    424,
    425,
    426,
    437,
    438,
    439,
    440,
    441,
    452,
    453,
    454,
    455,
    456,
    467,
    468,
    469,
    470,
    471,
    482,
    483,
    484,
    485,
    486,
    497,
    498,
    499,
    500,
    501,
    512,
    513,
    514,
    515,
    516,
    527,
    528,
    529,
    530,
    531,
    542,
    543,
    544,
    545,
    546,
    557,
    558,
    559,
    560,
    561,
    572,
    573,
    574,
    575,
    576,
    587,
    588,
    589,
    590,
    591,
    602,
    603,
    604,
    605,
    606,
    617,
    618,
    619,
    620,
    621,
    632,
    633,
    634,
    635,
    636,
    647,
    648,
    649,
    650,
    651,
    662,
    663,
    664,
    665,
    666,
    677,
    678,
    679,
    680,
    681,
    692,
    693,
    694,
    695,
    696,
    707,
    708,
    709,
    710,
    711,
    732,
    733,
    734,
    735,
    736,
    747,
    748,
    749,
    750,
    751,
    772,
    773,
    774,
    775,
    776,
    787,
    788,
    789,
    790,
    791,
    802,
    803,
    804,
    805,
    806,
    817,
    818,
    819,
    820,
    821,
    859,
    860,
    861,
    862,
    863,
    874,
    875,
    876,
    877,
    878,
    889,
    890,
    891,
    892,
    893,
    934,
    935,
    936,
    937,
    938,
    949,
    950,
    951,
    952,
    953,
    964,
    965,
    966,
    967,
    968,
    979,
    980,
    981,
    982,
    983,
    1021,
    1022,
    1023,
    1024,
    1025,
    1036,
    1037,
    1038,
    1039,
    1040,
    1046,
    1047,
    1048,
    1049,
    1050,
    1061,
    1062,
    1063,
    1064,
    1065,
    1076,
    1077,
    1078,
    1079,
    1080,
    1091,
    1092,
    1093,
    1094,
    1095,
    1106,
    1107,
    1108,
    1109,
    1110,
    1121,
    1122,
    1123,
    1124,
    1125,
    1136,
    1137,
    1138,
    1139,
    1140,
    1146,
    1147,
    1148,
    1149,
    1150,
    1161,
    1162,
    1163,
    1164,
    1165,
    1176,
    1177,
    1178,
    1179,
    1180,
    1186,
    1187,
    1188,
    1189,
    1190,
    1201,
    1202,
    1203,
    1204,
    1205,
    1216,
    1217,
    1218,
    1219,
    1220,
    1226,
    1227,
    1228,
    1229,
    1230,
    1236,
    1237,
    1238,
    1239,
    1240,
    1246,
    1247,
    1248,
    1249,
    1250]


# gets the dataloader
# include_field is either 'd' or 'f' or 'c' (combined), depending on what features you want
# num_fields_list is a list of ints
# if num_fields_list = [1, 2, 3, 4, 5], then all training examples that contain between 1-5 columns will be included in
# the returned dataloader
def get_training_dataloader(parameters, include_field, num_fields_list):
    batch_size = parameters['batch_size']
    dataset_list = []
    num_examples = 0

    for current_field in num_fields_list:
        X_name, y_name = '_X_train_', '_y_train_'
        prefix = 'field_' + str(current_field)
        X = np.load(
            saves_directory +
            '/' +
            prefix +
            X_name +
            str(num_datapoints) +
            '.npy')
        y = np.load(
            saves_directory +
            '/' +
            prefix +
            y_name +
            str(num_datapoints) +
            '.npy')
        if include_field == 'd':
            X = X[:, dataset_indices]
        elif include_field == 'f':
            X = X[:, field_indices]
        num_examples += X.shape[0]
        parameters['input_dim'] = X.shape[1]
        X, y = torch.from_numpy(X).float(), torch.from_numpy(y)
        dataset_list.append(data.TensorDataset(X, y))

    print('loaded training dimensions are (' + str(num_examples) +
          ',' + str(parameters['input_dim']) + ')')
    dataset = data.ConcatDataset(dataset_list)
    return data.DataLoader(dataset, batch_size=batch_size,
                           shuffle=True, num_workers=0)


# gets the val/test dataloader
# this function only returns examples that contain x columns, where x is
# specified as current_field in the parameters dict
def get_val_or_test_dataloader(parameters, include_field, get_test=False):
    current_field = parameters['current_field']
    batch_size = parameters['batch_size']

    X_name, y_name = '_X_val_', '_y_val_'
    if get_test:
        X_name, y_name = '_X_test_', '_y_test_'

    prefix = 'field_' + str(current_field)
    X = np.load(
        saves_directory +
        '/' +
        prefix +
        X_name +
        str(num_datapoints) +
        '.npy')
    y = np.load(
        saves_directory +
        '/' +
        prefix +
        y_name +
        str(num_datapoints) +
        '.npy')
    if include_field == 'd':
        X = X[:, dataset_indices]
    elif include_field == 'f':
        X = X[:, field_indices]
    X, y = torch.from_numpy(X).float(), torch.from_numpy(y)
    print('loaded val/test dimensions are', X.shape)
    dataset = data.TensorDataset(X, y)
    dataloader = data.DataLoader(
        dataset,
        shuffle=True,
        batch_size=batch_size,
        num_workers=0)
    return dataloader


# make sure that max_fields is equal to what you ran save_field.py with!
def main():
    parameters = {
        'batch_size': 200,
        'num_epochs': 100,
        'hidden_sizes': [1000, 1000, 1000],
        'learning_rate': 5e-4,
        'output_dim': 3,
        'weight_decay': 0,
        'dropout': 0.00,
        'patience': 15,
        'threshold': 1e-3,
        'current_field': 5,
        'max_fields': 5,

        'output_period': 0
    }

    assert len(sys.argv) >= 2, 'You must specify a command dm, ds, fm, fs, cm, cs'
    cmd = sys.argv[1]

    # dm = Dataset Mixed, train on all dataset level features up to max_fields
    # ds = Dataset Single, train on dataset level features only for current_field
    # fm = Field Mixed, train on all field level features up to max_fields
    # fs = Field Single, train on field level features only for current_field
    # cm = Combined Mixed, train on dataset+field level features up to max_fields
    # cs = Combined Single, train on dataset+field level features only for current_field
    # all validation/test accuracies are based on current_field

    print('command is ' + cmd)
    include_field = cmd[0]
    num_fields_list = [parameters['current_field']] if 's' in cmd else list(
        range(1, parameters['max_fields'] + 1))

    train_dataloader = get_training_dataloader(
        parameters, include_field, num_fields_list)
    val_dataloader = get_val_or_test_dataloader(parameters, include_field)
    train.train(train_dataloader, val_dataloader, None, parameters)


if __name__ == '__main__':
    main()
